import * as vue from 'vue';
import { PropType, VNode } from 'vue';
import { PageHeader } from 'vuepress/client';

interface TocPropsOptions {
    containerTag: string;
    containerClass: string;
    listClass: string;
    itemClass: string;
    linkTag: 'a' | 'RouteLink' | 'RouterLink';
    linkClass: string;
    linkActiveClass: string;
    linkChildrenActiveClass: string;
}

type TocPropsHeaders = PageHeader[];
interface TocProps {
    headers: TocPropsHeaders;
    options: TocPropsOptions;
}
declare const Toc: vue.DefineComponent<vue.ExtractPropTypes<{
    headers: {
        type: PropType<TocPropsHeaders | undefined>;
        default: undefined;
    };
    options: {
        type: PropType<Partial<TocPropsOptions>>;
        default: () => {};
    };
}>, () => VNode<vue.RendererNode, vue.RendererElement, {
    [key: string]: any;
}> | VNode<vue.RendererNode, vue.RendererElement, {
    [key: string]: any;
}>[], {}, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, {}, string, vue.PublicProps, Readonly<vue.ExtractPropTypes<{
    headers: {
        type: PropType<TocPropsHeaders | undefined>;
        default: undefined;
    };
    options: {
        type: PropType<Partial<TocPropsOptions>>;
        default: () => {};
    };
}>> & Readonly<{}>, {
    headers: TocPropsHeaders | undefined;
    options: Partial<TocPropsOptions>;
}, {}, {}, {}, string, vue.ComponentProvideOptions, true, {}, any>;

export { Toc, type TocProps, type TocPropsHeaders, type TocPropsOptions };
